{
  "info": {
    "_postman_id": "ocr-api-collection",
    "name": "OCR Document Processing API",
    "description": "Complete API collection for OCR processing with LLM enhancement. Includes all endpoints with automatic variable extraction.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Health & Setup",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check if the API server is running and healthy"
          }
        }
      ]
    },
    {
      "name": "2. Document Processing",
      "item": [
        {
          "name": "Process Document (File Upload)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Save document ID for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('document_id', response.document_id);",
                  "    pm.environment.set('last_processed_time', new Date().toISOString());",
                  "    ",
                  "    console.log('✅ Document submitted successfully');",
                  "    console.log('📄 Document ID: ' + response.document_id);",
                  "    console.log('Status: ' + response.status);",
                  "}",
                  "",
                  "// Test response structure",
                  "pm.test('Response has required fields', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('document_id');",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Document file (JPG, JPEG, PNG, PDF) - Max 10MB"
                },
                {
                  "key": "quality_threshold",
                  "value": "30",
                  "type": "text",
                  "description": "Minimum image quality score (0-100)"
                },
                {
                  "key": "confidence_threshold",
                  "value": "80",
                  "type": "text",
                  "description": "Minimum confidence for automatic processing"
                },
                {
                  "key": "enable_context",
                  "value": "true",
                  "type": "text",
                  "description": "Enable LLM enhancement (true/false)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/documents/process",
              "host": ["{{base_url}}"],
              "path": ["documents", "process"]
            },
            "description": "Upload a document for OCR processing with optional LLM enhancement"
          }
        },
        {
          "name": "Process Document (OBS URL)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Save document ID for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('document_id', response.document_id);",
                  "    pm.environment.set('last_processed_time', new Date().toISOString());",
                  "    ",
                  "    console.log('✅ Document submitted successfully');",
                  "    console.log('📄 Document ID: ' + response.document_id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "obs_url",
                  "value": "obs://your-bucket/document.jpg",
                  "type": "text",
                  "description": "OBS URL of the document"
                },
                {
                  "key": "quality_threshold",
                  "value": "30",
                  "type": "text",
                  "description": "Minimum image quality score"
                },
                {
                  "key": "confidence_threshold",
                  "value": "80",
                  "type": "text",
                  "description": "Minimum confidence threshold"
                },
                {
                  "key": "enable_context",
                  "value": "true",
                  "type": "text",
                  "description": "Enable LLM enhancement"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/documents/process",
              "host": ["{{base_url}}"],
              "path": ["documents", "process"]
            },
            "description": "Process a document from OBS storage"
          }
        }
      ]
    },
    {
      "name": "3. Status & Results",
      "item": [
        {
          "name": "Check Processing Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "// Visual status indicator",
                  "const statusIcons = {",
                  "    'pending': '⏳',",
                  "    'processing': '🔄',",
                  "    'completed': '✅',",
                  "    'manual_review': '👀',",
                  "    'failed': '❌'",
                  "};",
                  "",
                  "console.log(statusIcons[response.status] + ' Status: ' + response.status);",
                  "console.log('Progress: ' + response.progress + '%');",
                  "",
                  "// Test for completion",
                  "pm.test('Processing status check', function() {",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('progress');",
                  "});",
                  "",
                  "// Auto-retry if still processing",
                  "if (response.status === 'processing') {",
                  "    console.log('Still processing... Run this request again in a few seconds');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/documents/{{document_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["documents", "{{document_id}}", "status"]
            },
            "description": "Check the processing status of a submitted document"
          }
        },
        {
          "name": "Get Processing Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Results Retrieved Successfully');",
                  "    console.log('');",
                  "    console.log('📊 Summary:');",
                  "    console.log('- Status: ' + response.status);",
                  "    console.log('- Words Extracted: ' + response.word_count);",
                  "    console.log('- Final Confidence: ' + response.confidence_report.final_confidence + '%');",
                  "    console.log('- Routing: ' + response.confidence_report.routing_decision);",
                  "    ",
                  "    if (response.corrections_made && response.corrections_made.length > 0) {",
                  "        console.log('');",
                  "        console.log('✏️ Corrections Applied: ' + response.corrections_made.length);",
                  "        response.corrections_made.forEach(c => {",
                  "            console.log(`  - \"${c.original}\" → \"${c.corrected}\" (${c.type})`);",
                  "        });",
                  "    }",
                  "    ",
                  "    // Save results for download",
                  "    pm.environment.set('last_result', JSON.stringify(response));",
                  "}",
                  "",
                  "// Tests",
                  "pm.test('Results contain required fields', function() {",
                  "    pm.expect(response).to.have.property('document_id');",
                  "    pm.expect(response).to.have.property('extracted_text');",
                  "    pm.expect(response).to.have.property('confidence_report');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/documents/{{document_id}}/result",
              "host": ["{{base_url}}"],
              "path": ["documents", "{{document_id}}", "result"]
            },
            "description": "Get complete processing results including OCR text, enhancements, and metrics"
          }
        },
        {
          "name": "Get Confidence Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "console.log('🎯 Confidence Breakdown:');",
                  "console.log('- Image Quality: ' + response.confidence_scores.image_quality + '%');",
                  "console.log('- OCR Confidence: ' + response.confidence_scores.ocr_confidence + '%');",
                  "console.log('- Final Score: ' + response.confidence_scores.final + '%');",
                  "console.log('');",
                  "console.log('📋 Routing Decision: ' + response.routing.decision);",
                  "console.log('Priority: ' + response.routing.priority);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/documents/{{document_id}}/confidence",
              "host": ["{{base_url}}"],
              "path": ["documents", "{{document_id}}", "confidence"]
            },
            "description": "Get detailed confidence scoring breakdown"
          }
        }
      ]
    },
    {
      "name": "4. Queue Management",
      "item": [
        {
          "name": "Get Manual Review Queue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "console.log('📋 Manual Review Queue');",
                  "console.log('Total documents: ' + response.total);",
                  "console.log('');",
                  "",
                  "if (response.documents && response.documents.length > 0) {",
                  "    response.documents.forEach(doc => {",
                  "        console.log(`📄 ${doc.document_id}`);",
                  "        console.log(`   Priority: ${doc.priority}`);",
                  "        console.log(`   Confidence: ${doc.confidence_score}%`);",
                  "        console.log(`   Issues: ${doc.issues.join(', ')}`);",
                  "        console.log('');",
                  "    });",
                  "} else {",
                  "    console.log('✅ No documents pending review');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/queue/manual-review?priority=high&limit=10",
              "host": ["{{base_url}}"],
              "path": ["queue", "manual-review"],
              "query": [
                {
                  "key": "priority",
                  "value": "high",
                  "description": "Filter by priority (high/medium/low)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Maximum number of documents"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Pagination offset",
                  "disabled": true
                }
              ]
            },
            "description": "Get documents that require manual review"
          }
        },
        {
          "name": "Get Queue Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "console.log('📊 Queue Statistics');",
                  "console.log('==================');",
                  "console.log('Total Documents: ' + response.total_documents);",
                  "console.log('✅ Completed: ' + response.completed);",
                  "console.log('👀 Manual Review: ' + response.manual_review);",
                  "console.log('❌ Failed: ' + response.failed);",
                  "console.log('🔄 Processing: ' + response.processing);",
                  "console.log('');",
                  "console.log('⏱️ Avg Processing Time: ' + response.average_processing_time + 's');",
                  "console.log('📈 Success Rate: ' + response.success_rate + '%');",
                  "",
                  "if (response.priority_distribution) {",
                  "    console.log('');",
                  "    console.log('Priority Distribution:');",
                  "    console.log('- High: ' + response.priority_distribution.high);",
                  "    console.log('- Medium: ' + response.priority_distribution.medium);",
                  "    console.log('- Low: ' + response.priority_distribution.low);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/queue/stats",
              "host": ["{{base_url}}"],
              "path": ["queue", "stats"]
            },
            "description": "Get overall queue statistics and system metrics"
          }
        }
      ]
    },
    {
      "name": "5. Cost Management",
      "item": [
        {
          "name": "Estimate Processing Cost",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "console.log('💰 Cost Estimation');",
                  "console.log('==================');",
                  "console.log('Per Document:');",
                  "console.log('- OCR Cost: $' + response.per_document.estimated_ocr_cost);",
                  "console.log('- LLM Cost: $' + response.per_document.estimated_llm_cost);",
                  "console.log('- Total: $' + response.per_document.estimated_total_cost);",
                  "console.log('');",
                  "console.log('Total for all documents:');",
                  "console.log('- Total Cost: $' + response.total.estimated_total_cost);",
                  "console.log('- Processing Time: ' + (response.processing_time.total_seconds / 60).toFixed(1) + ' minutes');",
                  "",
                  "// Calculate cost per 1000 documents",
                  "const costPer1000 = response.per_document.estimated_total_cost * 1000;",
                  "console.log('');",
                  "console.log('📊 Scaled Estimate:');",
                  "console.log('Cost per 1000 documents: $' + costPer1000.toFixed(2));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"document_size_mb\": 2.0,\n  \"enhancement_types\": [\"context\"],\n  \"num_documents\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/cost/estimate",
              "host": ["{{base_url}}"],
              "path": ["cost", "estimate"]
            },
            "description": "Estimate processing costs before bulk submission"
          }
        },
        {
          "name": "Get Pricing Information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cost/pricing",
              "host": ["{{base_url}}"],
              "path": ["cost", "pricing"]
            },
            "description": "Get current pricing information for services"
          }
        }
      ]
    },
    {
      "name": "6. Testing Scenarios",
      "item": [
        {
          "name": "Test: Quick OCR (No Enhancement)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": ""
                },
                {
                  "key": "enable_context",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/documents/process",
              "host": ["{{base_url}}"],
              "path": ["documents", "process"]
            },
            "description": "Test basic OCR without LLM enhancement (faster processing)"
          }
        },
        {
          "name": "Test: High Quality Threshold",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": ""
                },
                {
                  "key": "quality_threshold",
                  "value": "70",
                  "type": "text"
                },
                {
                  "key": "confidence_threshold",
                  "value": "90",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/documents/process",
              "host": ["{{base_url}}"],
              "path": ["documents", "process"]
            },
            "description": "Test with strict quality requirements"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('🚀 Sending request to: ' + pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 30s', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000);",
          "});",
          "",
          "pm.test('Response is JSON', function() {",
          "    pm.response.to.have.header('Content-Type', /application\\/json/);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "document_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_processed_time",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_result",
      "value": "",
      "type": "string"
    }
  ]
}